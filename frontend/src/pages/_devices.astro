---
import DeviceCard from './_devicecard.astro'
import getApiUrl from '../utils/apiurl.ts'
const API_URL = getApiUrl()

export type Device = {
  id: number
  type: 'router' | 'switch' | string
  ip_address: string
  name: string
  model: string | null
  url: string | null
  last_update: string
  notes: string | null
}

let devices: Device[] = []

try {
  const response = await fetch(`${API_URL}/devices`)
  devices = await response.json()
} catch (error) {
  console.error(error)
}

const seperatedDevices: Record<string, Device[]> = {}

devices.map((device: Device) => {
  const type = device.type.toLowerCase()
  if (!seperatedDevices[type]) {
    seperatedDevices[type] = []
  }
  seperatedDevices[type].push(device)
})
---

{
  devices.length < 1 ? (
    <main class="container">
      <header>
        <h2>No devices found</h2>
        <p>No connection to the backend</p>
        <button id="reload">Reload?</button>
      </header>
    </main>
  ) : (
    <main class="container">
      <section>
        {Object.keys(seperatedDevices).map((type: string) => (
          <div class="devicegrid">
            {seperatedDevices[type].map((device: Device) => (
              <DeviceCard device={device} />
            ))}
          </div>
        ))}
      </section>
    </main>
  )
}

<script>
  document.querySelector('button#reload')?.addEventListener('click', () => {
    window.location.reload()
  })
</script>

<style>
  :root {
    --card-padding: 1rem;
  }

  button {
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    border: none;
    background-color: var(--secondary-dark);
    color: var(--primary-light);
    font-size: 1rem;
    cursor: pointer;
    margin-block: 0.5rem;
  }

  .devicegrid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-gap: 2rem;
    margin-bottom: 4rem;
  }
</style>
