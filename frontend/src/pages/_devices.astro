---
const response = await fetch('http://localhost:5000/devices')
const devices = await response.json()

type Device = {
  id: number
  type: 'router' | 'switch' | string
  ip_address: string
  name: string
  model: string | null
  url: string | null
  last_update: string
  notes: string | null
}

const seperatedDevices: Record<string, Device[]> = {}

devices.map((device: Device) => {
  const { type } = device
  if (!seperatedDevices[type]) {
    seperatedDevices[type] = []
  }
  seperatedDevices[type].push(device)
})

console.log(seperatedDevices)
---

<main class="container">
  <h2>Devices</h2>
  <section>
    {
      Object.keys(seperatedDevices).map((type: string) => (
        <div>
          <h3 class="type">{type}</h3>
          <div class="devicegrid">
            {seperatedDevices[type].map((device: Device) => (
              <div class="card">
                <div>
                  <h4>{device.name}</h4>
                  <p>{device.model}</p>
                </div>
                <hr />
                <div>
                  {device.url ? (
                    <p>
                      <a href={device.url}>{device.ip_address}</a>
                    </p>
                  ) : (
                    <p>{device.ip_address}</p>
                  )}
                  <p>{device.last_update}</p>
                  <p>{device.notes || ''}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    }
  </section>
</main>

<style>
  :root {
    --card-padding: 1rem;
  }

  .devicegrid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    grid-gap: 1rem;
  }

  .type::first-letter {
    text-transform: uppercase;
  }

  .card {
    background-color: var(--background);
    border-radius: 1rem;
    padding: var(--card-padding) calc(var(--card-padding) * 2);
  }

  .card p,
  .card h4 {
    margin: 0;
  }
</style>
