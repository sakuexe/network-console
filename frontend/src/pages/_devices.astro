---
import DeviceCard from './_devicecard.astro'
import getApiUrl from '../utils/apiurl.ts'
const API_URL = getApiUrl()
const response = await fetch(`${API_URL}/devices`)
const devices = await response.json()

export type Device = {
  id: number
  type: 'router' | 'switch' | string
  ip_address: string
  name: string
  model: string | null
  url: string | null
  last_update: string
  notes: string | null
}

const seperatedDevices: Record<string, Device[]> = {}

devices.map((device: Device) => {
  const { type } = device
  if (!seperatedDevices[type]) {
    seperatedDevices[type] = []
  }
  seperatedDevices[type].push(device)
})
---

<main class="container">
  <section>
    {
      Object.keys(seperatedDevices).map((type: string) => (
        <div>
          <h2 class="capitalize">{type}</h3>
          <div class="devicegrid">
            {seperatedDevices[type].map((device: Device) => (
              <DeviceCard device={device} />
            ))}
          </div>
        </div>
      ))
    }
  </section>
</main>

<style>
  :root {
    --card-padding: 1rem;
  }

  .devicegrid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    grid-gap: 1rem;
  }

</style>
