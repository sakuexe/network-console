---
import Layout from '../../../layouts/Layout.astro'
import getApiUrl from '../../../utils/apiurl.ts'
import type { Device } from '../../_devices.astro'

const response = await fetch(`${getApiUrl()}/devices/${Astro.params.id}`)
const device = (await response.json()) as Device

const { name, model, ip_address, url, notes } = device
const isLoggedIn = Astro.cookies.has('loggedIn')

const last_update = new Date(device.last_update).toLocaleString('fi-FI')
---

<Layout title={`Remove ${name}?`}>
  {
    !isLoggedIn ? (
      <article>
        <p class="text-center">
          You are not logged in. Please <a href="/login">log in</a> to remove
          the device.
        </p>
      </article>
    ) : (
      <section class="container">
        <article>
          <header>
            <h1>Remove device?</h1>
            <p class="last-updated">last updated: {last_update.split(' ')[0]}</p>
          </header>
          <div>
            <p>Id:</p>
            <p>{Astro.params.id}</p>
          </div>
          <div>
            <p>Name/Make:</p>
            <p>{name}</p>
          </div>
          <div>
            <p>Model:</p>
            <p>{model}</p>
          </div>
          <div>
            <p>IP address:</p>
            <p>{ip_address}</p>
          </div>
          {url && (
            <div>
              <p>URL:</p>
              <p>{url}</p>
            </div>
          )}
          {notes && (
            <div>
              <p>Notes:</p>
              <p>{notes}</p>
            </div>
          )}
          <form
            action={`${getApiUrl()}/devices/remove/${Astro.params.id}`}
            method="POST"
          >
            <button type="button">Cancel</button>
            <button type="submit">Remove</button>
          </form>
        </article>
      </section>
    )
  }
</Layout>

<script>
  const cancelButton = document.querySelector('button[type="button"]')
  cancelButton?.addEventListener('click', () => {
    window.location.href = '/'
  })
</script>

<style>
  section {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100svh;
  }
  article {
    width: min(100%, 400px);
    background-color: var(--primary);
    border-radius: var(--border-radius);
    padding: 1rem 2rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    box-shadow: var(--shadow-md);
  }
  article > h1,
  article > p {
    margin: 0;
    line-height: 1;
  }
  article > div > p {
    margin: 0;
  }
  article > div::after {
    content: '';
    width: 100%;
    border-bottom: 1px solid var(--secondary);
    opacity: 0.25;
  }
  article > div {
    display: flex;
    flex-direction: column;
  }
  article > div > p:first-child {
    font-size: 1rem;
  }
  article > div > p:last-child {
    font-weight: bold;
  }
  .last-updated {
    font-size: 1rem;
    opacity: 0.75;
    margin: 0;
  }
  article > form {
    display: flex;
    gap: 0.5rem;
    margin-top: 2rem;
  }
  article > form > button {
    border: none;
    border-radius: calc(var(--border-radius) / 2);
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.25s ease-in-out;
  }
  article > form > button:hover {
    box-shadow: var(--shadow-lg);
    scale: 1.05;
  }
  article > form > button:first-child {
    background-color: transparent;
    color: var(--secondary);
    border: 1px solid var(--secondary);
  }
  article > form > button:last-child {
    background-color: var(--secondary);
    color: var(--primary);
    flex-grow: 1;
  }
</style>
